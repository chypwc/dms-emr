name: Deploy DMS

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      region:
        description: "AWS Region"
        required: true
        default: "ap-southeast-2"
      SourceBucketName:
        description: "S3 Source Bucket Name"
        default: "source-bucket-chien"
        required: true
      DataBucketName:
        description: "S3 Data Bucket Name"
        default: "data-bucket-chien"
        required: true
      deployRole:
        description: "Deploy IAM role?"
        required: true
        default: "false"
      deployVpc:
        description: "Deploy VPC Stack?"
        required: true
        default: "false"
      deployS3:
        description: "Deploy S3 Buckets Stack?"
        required: true
        default: "false"
      deployDMS:
        description: "Deploy DMS?"
        required: true
        default: "false"

jobs:
  cfn-deployment:
    # if: ${{ github.event.inputs.deployResource == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Deploy IAM role for DMS, EMR, and Glue
        id: iam-role
        if: ${{ github.event.inputs.deployRole == 'true' }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: iam-role
          template: cfn/iam-role.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: >-
            PostgreSQLSecret=postgresql_dms

      - name: Deploy VPC CloudFormation Stack
        id: vpc-stack
        if: ${{ github.event.inputs.deployVpc == 'true' }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: vpc-stack
          template: cfn/vpc.yml
          capabilities: CAPABILITY_NAMED_IAM

      - name: Deploy S3 Buckets CloudFormation Stacks
        id: s3-buckets
        if: ${{ github.event.inputs.deployS3 == 'true' }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: s3-buckets
          template: cfn/s3.yml
          parameter-overrides: >-
            SourceBucketName=${{ github.event.inputs.SourceBucketName }},
            DataBucketName=${{ github.event.inputs.DataBucketName }}
          capabilities: CAPABILITY_NAMED_IAM

      - name: Deploy DMS endpoints, instance, and task
        id: dms
        if: ${{ github.event.inputs.deployDMS == 'true' }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: dms
          template: cfn/dms.yml
          parameter-overrides: >-
            SourceBucketName=${{ github.event.inputs.SourceBucketName }},
            PostgreSQLSecret=postgresql_dms
          capabilities: CAPABILITY_NAMED_IAM

      - name: Extract DMS Endpoint and Instance ARNs from Stack Outputs
        id: dms-arns
        run: |
          ENDPOINT_ARN=$(aws cloudformation describe-stacks \
            --stack-name dms \
            --query "Stacks[0].Outputs[?OutputKey=='SourceEndpointArn'].OutputValue" \
            --output text)

          INSTANCE_ARN=$(aws cloudformation describe-stacks \
            --stack-name dms \
            --query "Stacks[0].Outputs[?OutputKey=='ReplicationInstanceArn'].OutputValue" \
            --output text)

          echo "ENDPOINT_ARN=$ENDPOINT_ARN" >> $GITHUB_ENV
          echo "INSTANCE_ARN=$INSTANCE_ARN" >> $GITHUB_ENV

      - name: Test DMS Endpoint Connection
        run: |
          aws dms test-connection \
            --replication-instance-arn ${{ env.INSTANCE_ARN }} \
            --endpoint-arn ${{ env.ENDPOINT_ARN }}

      - name: Wait for Test Result
        run: |
          aws dms describe-connections \
            --filters "Name=endpoint-arn,Values=${{ env.ENDPOINT_ARN }}"

      - name: Start or Resume DMS Replication Task
        run: |
          TASK_ARN=$(aws cloudformation describe-stacks \
            --stack-name dms \
            --query "Stacks[0].Outputs[?OutputKey=='ReplicationTaskArn'].OutputValue" \
            --output text)

          echo "Replication Task ARN: $TASK_ARN"

          TASK_STATUS=$(aws dms describe-replication-tasks \
            --filters "Name=replication-task-arn,Values=$TASK_ARN" \
            --query "ReplicationTasks[0].Status" \
            --output text)

          echo "Current task status: $TASK_STATUS"

          if [ "$TASK_STATUS" = "stopped" ]; then
            echo "Resuming replication task..."
            aws dms start-replication-task \
              --replication-task-arn $TASK_ARN \
              --start-replication-task-type resume-processing
          elif [ "$TASK_STATUS" = "ready" ] || [ "$TASK_STATUS" = "failed" ]; then
            echo "Starting replication task..."
            aws dms start-replication-task \
              --replication-task-arn $TASK_ARN \
              --start-replication-task-type start-replication
          else
            echo "Task is already running or not in a startable state."
          fi
    #   - name: Set today's date
    #     run: echo "TODAY=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

    #   - name: Deploy EMR spark job
    #     id: emr-spark
    #     uses: aws-actions/aws-cloudformation-github-deploy@v1
    #     with:
    #       name: emr-spark
    #       template: cfn/emr.yml
    #       capabilities: CAPABILITY_NAMED_IAM
    #       parameter-overrides: >-
    #         ClusterName=emr-cluster-${{ env.TODAY }}
    #         SourceBucketName=${{ github.event.inputs.SourceBucketName }}
